# -*- coding: utf-8 -*-
"""stream.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZivynqtTU7alYeohRLQGO9Vfh1pEE3Wx
"""

# !pip install streamlit

# import streamlit as st
# import pandas as pd
# import pickle
# import requests
# from sklearn.ensemble import RandomForestClassifier
# from sklearn.preprocessing import OneHotEncoder
# from sklearn.compose import ColumnTransformer
# from sklearn.pipeline import Pipeline
# from io import BytesIO

# # def load_model():
# #     model_url = 'https://github.com/TejaswiniKav/UMBC-DATA606-Capstone/blob/main/app/ML.pkl'
# #     with open('model_url', 'rb') as f:
# #       data = pickle.load(f)
# #       return data

# import pickle
# import requests

# def load_model_from_github(url):
#     response = requests.get(url)
#     if response.status_code == 200:
#         loaded_model = pickle.loads(response.content)
#         return model
#     else:
#         print(f"Error fetching model: {response.status_code} - {response.reason}")
#         return None

# # Example URL of the pickle file on GitHub
# github_url = 'https://github.com/TejaswiniKav/UMBC-DATA606-Capstone/blob/main/app/ML.pkl'

# # Load the model from the GitHub URL
# loaded_model = load_model_from_github(github_url)

# if loaded_model:
#     print("Model loaded successfully!")
# else:
#     print("Failed to load model.")


# def load_data():
#     url = "https://raw.githubusercontent.com/TejaswiniKav/UMBC-DATA606-Capstone/main/data/telecom_customer_churn.csv"
#     df = pd.read_csv(url)
#     return df

# # App title
# st.title('Telecom Customer Churn Prediction')

# # Load model and data
# model = load_model()
# data = load_data()
# feature_names = data.columns[:-1]  # assuming the last column is the target

# # User Inputs
# tenure = st.number_input('Tenure (months)', min_value=0, value=30)
# monthly_charges = st.number_input('Monthly Charges', min_value=0.0, value=70.0)
# total_charges = st.number_input('Total Charges', min_value=0.0, value=200.0)
# contract = st.selectbox('Contract Type', ['Month-to-month', 'One year', 'Two year'])

# # Prediction
# if st.button('Predict'):
#     input_df = pd.DataFrame([[tenure, monthly_charges, total_charges, contract]], columns=['tenure', 'monthly_charges', 'total_charges', 'contract'])
#     # Process categorical features if not handled in the model
#     prediction = model.predict(input_df)
#     result = 'Churn' if prediction[0] == 1 else 'No Churn'
#     st.success(f'The prediction result is: {result}')

# # Optional: Display the dataframe
# if st.checkbox('Show data used for training'):
#     st.write(data)

#!pip install streamlit
import streamlit as st
import pandas as pd
import pickle
import requests

# Load data from the GitHub URL
#@st.cache
# def load_data():
#     url = 'https://github.com/TejaswiniKav/UMBC-DATA606-Capstone/blob/main/data/telecom_customer_churn.csv'
#     df = pd.read_csv(url)
#     return df

# URL of the CSV file
url = 'https://github.com/TejaswiniKav/UMBC-DATA606-Capstone/blob/main/data/telecom_customer_churn.csv'

# Fetch the raw CSV content
response = requests.get(url)
if response.status_code == 200:
    # Read the content as text and split it into lines
    lines = response.text.split('\n')
    # Process the lines to create a DataFrame
    data = pd.DataFrame([line.split(',') for line in lines], columns=None)
else:
    print(f"Error fetching CSV file: {response.status_code} - {response.reason}")

# Display the first few rows of the DataFrame
print(data.head())

import builtins

def my_hash_func(obj):
    if isinstance(obj, builtins.function):
        return None  # Return None to indicate that the object should not be hashed
    else:
        return obj

def my_hash_func(obj):
    raise ValueError("This should not be called!")

# Load the trained model from a local pickle file
@st.cache(allow_output_mutation=True)
def load_model():
    with open('ML.pkl', 'rb') as file:
        model = pickle.load(file)
    return model

# # Load the trained model from a local pickle file
# @st.cache(allow_output_mutation=True)
# def load_model():
#     filename = 'ML.pkl'
#     loaded_model = pickle.load(open(filename, 'rb'))
#     return loaded_model
# App title
st.title('Telecom Customer Churn Prediction')

# # Load model
# model = load_model()

# Save the model
filename = 'ML.pkl'
pickle.dump(load_model, open(filename, 'wb'))

# Load the model
load_model = pickle.load(open(filename, 'rb'))

# model = load_model()


# User Inputs
tenure = st.number_input('Tenure (months)', min_value=0, value=30)
monthly_charges = st.number_input('Monthly Charges', min_value=0.0, value=70.0)
total_charges = st.number_input('Total Charges', min_value=0.0, value=200.0)
contract = st.selectbox('Contract Type', ['Month-to-month', 'One year', 'Two year'])

# Prediction
if st.button('Predict'):
    input_data = pd.DataFrame([[tenure, monthly_charges, total_charges, contract]], columns=['tenure', 'MonthlyCharges', 'TotalCharges', 'Contract'])
    prediction = load_model.predict(input_data)
    result = 'Churn' if prediction[0] == 1 else 'No Churn'
    st.success(f'The prediction result is: {result}')

streamlit run stream_py.py

